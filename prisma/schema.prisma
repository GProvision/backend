generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums para tipo de acciones
enum TipoAccion {
  CREAR
  ACTUALIZAR
  ELIMINAR
}

// Enums para tipo de recursos
enum TipoRecurso {
  CLIENTE
  OPTICA
  USUARIO
  FICHA
  TIPO_LENTE
  ARMAZON
  DELEGACION
  SINDICATO
}

// Cliente (paciente)
model Cliente {
  id           Int       @id @default(autoincrement())
  titular      String
  beneficiario String  @unique
  dni          String  @unique
  nroAfiliado  String  @unique
  idSindicato  Int
  sindicato    Sindicato @relation(fields: [idSindicato], references: [id])
  contacto     Json?     @db.Json
  activo       Boolean   @default(true)
  fichas       Ficha[]

  @@index([beneficiario, dni, nroAfiliado])
}

model Sindicato {
  id           Int          @id @default(autoincrement())
  nombre       String  @unique
  activo       Boolean      @default(true)
  delegaciones Delegacion[]
  opticas      Optica[]
  clientes     Cliente[] // Un Sindicato tiene muchos Clientes
  fichas       Ficha[]

  @@index([nombre])
}

model Delegacion {
  id         Int         @id @default(autoincrement())
  nombre     String  @unique
  activo     Boolean     @default(true)
  sindicatos Sindicato[]
  fichas     Ficha[]

  @@index([nombre])
}

model Optica {
  id         Int         @id @default(autoincrement())
  nombre     String  @unique
  activo     Boolean     @default(true)
  sindicatos Sindicato[]
  fichas     Ficha[]

  @@index([nombre])
}

model TipoLente {
  id     Int     @id @default(autoincrement())
  nombre String  @unique
  activo Boolean @default(true)
  lentes Lente[]

  @@index([nombre])
}

model Laboratorio {
  id     Int     @id @default(autoincrement())
  nombre String  @unique
  activo Boolean @default(true)
  lentes Lente[]

  @@index([nombre])
}

model Armazon {
  id                Int     @id @default(autoincrement())
  material          String
  tipoArmazon       String
  ubicacion         String
  color             String
  codigoColor       String
  codigoPatilla     String  
  codigoInterno     String  @unique
  cantidad          Int     @default(0)
  cantidadMinima    Int     @default(2)
  activo            Boolean @default(true)
  costo             Decimal @db.Decimal(10, 2) @default(0.00)
  precioVenta       Decimal @db.Decimal(10, 2) @default(0.00)
  lentes            Lente[]
  // codigoPatilla
  @@index([codigoInterno])
}

// Ficha de pedido (versión simple)
model Ficha {
  id            Int      @id @default(autoincrement())
  fecha         DateTime @default(now())
  comentario    String?
  esCasaCentral Boolean  @default(false)
  activo        Boolean  @default(true)

  idCliente    Int
  idSindicato  Int
  idDelegacion Int
  idOptica     Int

  cliente    Cliente    @relation(fields: [idCliente], references: [id])
  optica     Optica     @relation(fields: [idOptica], references: [id])
  sindicato  Sindicato  @relation(fields: [idSindicato], references: [id])
  delegacion Delegacion @relation(fields: [idDelegacion], references: [id])
  lentes     Lente[]

}

model Lente {
  id        Int     @id @default(autoincrement())
  tipo      String
  nro_pedido    String
  estado        Int      @default(1)
  voucher       String?
  codigoBarra    String?
  fechaEntrega  DateTime? 
  extra     Json?   @db.Json
  // Datos del lente
  gradOdEsf String?
  gradOdCil String?
  ejeOd     String?
  gradOiEsf String?
  gradOiCil String?
  ejeOi     String?

  // Relaciones
  idArmazon    Int
  idLaboratorio Int?
  idTipoLente   Int?
  laboratorio   Laboratorio? @relation(fields: [idLaboratorio], references: [id])
  tipoLente     TipoLente?   @relation(fields: [idTipoLente], references: [id])
  armazon       Armazon    @relation(fields: [idArmazon], references: [id])
  fichas        Ficha[]

  @@index([gradOdEsf, gradOdCil, ejeOd, gradOiEsf, gradOiCil, ejeOi])
}

// Usuarios y roles para autenticación básica
model Rol {
  id       Int       @id @default(autoincrement())
  nombre   String
  usuarios Usuario[]
}

model Usuario {
  id       Int      @id @default(autoincrement())
  nombre   String
  clave    String
  usuario  String   @unique
  token    String?
  rolId    Int
  rol      Rol      @relation(fields: [rolId], references: [id])
  activo   Boolean  @default(true)
  acciones Accion[]

  @@index([usuario, nombre])
}

model Accion {
  id        Int         @id @default(autoincrement())
  usuarioId Int
  usuario   Usuario     @relation(fields: [usuarioId], references: [id])
  fecha     DateTime    @default(now())
  accion    TipoAccion
  recurso   TipoRecurso
  recursoId Int? // id del registro afectado

  @@index([accion, recurso])
}
